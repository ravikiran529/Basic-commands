Git basic commands:

1) git init <directory> ==  Create empty Git repo in specified directory. initializes the current directory as a git repository

2) git clone <repo> ==  To clone a rpository(remote)

3) git config user.name <name> == Define author name to be used for all commits in current repo.
   git config user.email <name> == Define author email to be used for all commits in current repo.

4) git add <directory/file> == To add a file/dir to staging area
          
5) git commit -m "<message>" ==  To add file(s) to local repository
   git commit -am "<message>" == To add file and committing
   
6) git status == List which files are staged, unstaged, and untracked.

7) git log [options] == Display the entire commit history using the default format.
           --oneline           ---- Shows logs in oneline individually
           -limit(num)         ---- limit the commits ( ex> last 5 commits)
           -p                  ---- Display the full diff of each commit
           -stat               ---- Include which files were altered and the relative number of lines that were added or deleted from each of them.
           --author="<name>"   ---- Search for commits by a particular author
           --grep="<pattern>"  ---- Search for commits with a commit message that matches <pattern>.
           -<since>..<until>   ---- Show commits that occur between <since> and <until>. Args can be a commit ID, branch name, HEAD, or any other kind of revision referenc
           -<file>             ---- Only display commits that have the specified file
           --graph --decorate  ---- --graph flag draws a text based graph of commits on left side of commit msgs. --decorate adds names of branches or tags of commits shown
8) git diff == Show unstaged changes between your index and working directory.

9) git revert <commit> == Create new commit that undoes all of the changes made in <commit>,
                          then apply it to the current branch.
                          
10) git reset <file> == Remove <file> from the staging area, but leave the working directory
                        unchanged. This unstages a file without overwriting any changes.
                        
11) git clean -n/-f ==  n--> Shows which files would be removed from working directory
                        f --> to execute clean operation 

12) git config --global user.name <name> == Define the author name to be used for all commits by the current user.

13) git config --global user.email <email> == Define the author email to be used for all commits by the current user.
 
14) git config --global alias.<alias-name> <git-command> == Create shortcut for a Git command. E.g. alias.glog log --graph --oneline will set git glog equivalent to git log --graph --oneline.


15) git config --global --edit == Open the global configuration file in a text editor for manual editing.


16) git commit --amend  == Replace the last commit with the staged changes and last commit combined. Use with nothing staged to edit the last commit’s message

17) git rebase <base> == Rebase the current branch onto <base>. <base> can be a commit ID,  a branch name, a tag, or a relative reference to HEAD.

18) git reflog == Show a log of changes to the local repository’s HEAD. Add --relative-date flag to show date info or --all to show all refs

19) git branch -a/<branch_name> == To list all branches in local repo/To create a branch

20) git checkout <branch> == to switch to the branch

21) git checkout -b <branch> == To create a branch and switch to that branch directly

22) git merge <branch> == To merge a branch into current branch

23) git remote add <name> <url> == Create a new connection to a remote repo

24) git fetch <remote> <branch> == Fetches a specific <branch>, from the repo. Leave off <branch> to fetch all remote refs.

25) git pull <remote> ==  Fetch the specified remote’s copy of current branch and immediately merge it into the local copy.

26) git push <remote> <branch> == Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn’t exist

27) git diff HEAD ==  Show difference between working directory and last commit. 

28) git diff --cached ==  Show difference between staged changes and last commit

29) git reset == Reset staging area to match most recent commit, but leave the working directory unchanged.

30) git reset --hard == Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory.

31) git reset <commit> ==  Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone.

32) git reset --hard <commit> == Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after <commit>

33) git rebase -i <base> == Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base.

34) git pull --rebase <remote> == Fetch the remote’s copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches

35) git push <remote> --force == Forces the  git push  even if it results in a non-fast-forward merge. Do not use the --force flag unless you’re absolutely sure you know what you’re doing.

36) git push <remote> --all == Push all of your local branches to the specified remote.

37) git tag/<tag_name> == To list all tags in local repo/To create a tag 

38) git checkout <tag_name> == To switch to the specified tag

39) git push <remote> --tags == Tags aren’t automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo.

40)


